// Mocks generated by Mockito 5.4.6 from annotations
// in verdex/test/integration/app_flow_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:io' as _i6;
import 'dart:ui' as _i9;

import 'package:http/http.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:verdex/services/apple_classifier_service.dart' as _i10;
import 'package:verdex/services/auth_service.dart' as _i2;
import 'package:verdex/services/connectivity_service.dart' as _i8;
import 'package:verdex/services/language_service.dart' as _i11;
import 'package:verdex/services/plant_service.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i2.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<Map<String, dynamic>?> refreshUser() =>
      (super.noSuchMethod(
            Invocation.method(#refreshUser, []),
            returnValue: _i3.Future<Map<String, dynamic>?>.value(),
          )
          as _i3.Future<Map<String, dynamic>?>);

  @override
  _i3.Future<Map<String, dynamic>> login(String? login, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#login, [login, password]),
            returnValue: _i3.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<String?> getToken() =>
      (super.noSuchMethod(
            Invocation.method(#getToken, []),
            returnValue: _i3.Future<String?>.value(),
          )
          as _i3.Future<String?>);

  @override
  _i3.Future<void> initializeUser() =>
      (super.noSuchMethod(
            Invocation.method(#initializeUser, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> isAuthenticated() =>
      (super.noSuchMethod(
            Invocation.method(#isAuthenticated, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> syncWhenOnline() =>
      (super.noSuchMethod(
            Invocation.method(#syncWhenOnline, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i4.Response?> getAuthenticated(String? endpoint) =>
      (super.noSuchMethod(
            Invocation.method(#getAuthenticated, [endpoint]),
            returnValue: _i3.Future<_i4.Response?>.value(),
          )
          as _i3.Future<_i4.Response?>);

  @override
  _i3.Future<bool> signup({
    required String? name,
    required String? email,
    required String? password,
    required String? passwordConfirmation,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signup, [], {
              #name: name,
              #email: email,
              #password: password,
              #passwordConfirmation: passwordConfirmation,
            }),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> sendTempPassword(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#sendTempPassword, [email]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<Map<String, dynamic>> updateProfile({
    String? username,
    String? email,
    String? avatarPath,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateProfile, [], {
              #username: username,
              #email: email,
              #avatarPath: avatarPath,
            }),
            returnValue: _i3.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<Map<String, dynamic>> changePassword({
    required String? currentPassword,
    required String? newPassword,
    required String? newPasswordConfirmation,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#changePassword, [], {
              #currentPassword: currentPassword,
              #newPassword: newPassword,
              #newPasswordConfirmation: newPasswordConfirmation,
            }),
            returnValue: _i3.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<Map<String, dynamic>?> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue: _i3.Future<Map<String, dynamic>?>.value(),
          )
          as _i3.Future<Map<String, dynamic>?>);

  @override
  _i3.Future<bool> isOfflineMode() =>
      (super.noSuchMethod(
            Invocation.method(#isOfflineMode, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> isOfflineLoginAvailable() =>
      (super.noSuchMethod(
            Invocation.method(#isOfflineLoginAvailable, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> forceLogout() =>
      (super.noSuchMethod(
            Invocation.method(#forceLogout, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [PlantService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlantService extends _i1.Mock implements _i5.PlantService {
  MockPlantService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<Map<String, dynamic>>> getAllPlants({
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getAllPlants, [], {#forceRefresh: forceRefresh}),
            returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> searchPlants(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchPlants, [query]),
            returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<Map<String, dynamic>?> getPlantById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getPlantById, [id]),
            returnValue: _i3.Future<Map<String, dynamic>?>.value(),
          )
          as _i3.Future<Map<String, dynamic>?>);

  @override
  _i3.Future<void> cachePlants(List<Map<String, dynamic>>? plants) =>
      (super.noSuchMethod(
            Invocation.method(#cachePlants, [plants]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<Map<String, dynamic>>> loadCachedPlants() =>
      (super.noSuchMethod(
            Invocation.method(#loadCachedPlants, []),
            returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<void> clearCache() =>
      (super.noSuchMethod(
            Invocation.method(#clearCache, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> refreshCache() =>
      (super.noSuchMethod(
            Invocation.method(#refreshCache, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<Map<String, dynamic>?> identifyPlant(_i6.File? image) =>
      (super.noSuchMethod(
            Invocation.method(#identifyPlant, [image]),
            returnValue: _i3.Future<Map<String, dynamic>?>.value(),
          )
          as _i3.Future<Map<String, dynamic>?>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getPlants() =>
      (super.noSuchMethod(
            Invocation.method(#getPlants, []),
            returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<bool> testImageUrl(String? imageUrl) =>
      (super.noSuchMethod(
            Invocation.method(#testImageUrl, [imageUrl]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  String getFallbackImageUrl(String? originalUrl) =>
      (super.noSuchMethod(
            Invocation.method(#getFallbackImageUrl, [originalUrl]),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.method(#getFallbackImageUrl, [originalUrl]),
            ),
          )
          as String);

  @override
  _i3.Future<bool> testApiConnection() =>
      (super.noSuchMethod(
            Invocation.method(#testApiConnection, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<List<Map<String, dynamic>>> forceRefreshPlants() =>
      (super.noSuchMethod(
            Invocation.method(#forceRefreshPlants, []),
            returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<Map<String, dynamic>> getCacheStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getCacheStatus, []),
            returnValue: _i3.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i3.Future<Map<String, dynamic>>);
}

/// A class which mocks [ConnectivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityService extends _i1.Mock
    implements _i8.ConnectivityService {
  MockConnectivityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);

  @override
  bool get isInitialized =>
      (super.noSuchMethod(Invocation.getter(#isInitialized), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i3.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<bool> checkConnectivity() =>
      (super.noSuchMethod(
            Invocation.method(#checkConnectivity, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> refreshConnectivity() =>
      (super.noSuchMethod(
            Invocation.method(#refreshConnectivity, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AppleClassifierService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppleClassifierService extends _i1.Mock
    implements _i10.AppleClassifierService {
  MockAppleClassifierService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isModelLoaded =>
      (super.noSuchMethod(Invocation.getter(#isModelLoaded), returnValue: false)
          as bool);

  @override
  _i3.Future<bool> loadModel() =>
      (super.noSuchMethod(
            Invocation.method(#loadModel, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<Map<String, dynamic>> predict(_i6.File? imageFile) =>
      (super.noSuchMethod(
            Invocation.method(#predict, [imageFile]),
            returnValue: _i3.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i3.Future<Map<String, dynamic>>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [LanguageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLanguageService extends _i1.Mock implements _i11.LanguageService {
  MockLanguageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get majorLanguageCode =>
      (super.noSuchMethod(
            Invocation.getter(#majorLanguageCode),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#majorLanguageCode),
            ),
          )
          as String);

  @override
  String get effectiveLanguageCode =>
      (super.noSuchMethod(
            Invocation.getter(#effectiveLanguageCode),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#effectiveLanguageCode),
            ),
          )
          as String);

  @override
  List<_i11.Language> get availableLanguages =>
      (super.noSuchMethod(
            Invocation.getter(#availableLanguages),
            returnValue: <_i11.Language>[],
          )
          as List<_i11.Language>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i3.Future<void> loadSavedLanguage() =>
      (super.noSuchMethod(
            Invocation.method(#loadSavedLanguage, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> setLanguage(String? majorCode, {String? minorCode}) =>
      (super.noSuchMethod(
            Invocation.method(
              #setLanguage,
              [majorCode],
              {#minorCode: minorCode},
            ),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
